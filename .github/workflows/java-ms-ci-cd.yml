name: Java Microservice CI/CD (reusable)

on:
  workflow_call:
    inputs:
      service_name:          { type: string, required: true }   # p.ej. account-service
      sonar_project_key:     { type: string, required: true }   # clave SonarCloud
      docker_image:          { type: string, required: true }   # repo/image:tag
      container_port:        { type: number,  required: true }  # 8082, 8083…
      build_command:         { type: string, default: "mvn -B clean verify" }
    secrets:                 # se reenvían al job tal cual
      SONAR_TOKEN:           { required: true }
      DOCKER_USERNAME:       { required: true }
      DOCKER_PASSWORD:       { required: true }
      VPS_HOST:              { required: true }
      VPS_USERNAME:          { required: true }
      VPS_PRIVATE_KEY:       { required: true }
      SPRING_DATASOURCE_URL: { required: true }
      DB_NAME:               { required: true }
      DB_USER:               { required: true }
      DB_PASSWORD:           { required: true }
      API_KEY:               { required: true }
      JWT_SECRET:            { required: true }

jobs:

  analyze:
    runs-on: ubuntu-latest
    outputs:
      analysis-id: ${{ steps.extract.outputs.analysis-id }}

    steps:
      - uses: actions/checkout@v4

      # (1) Merge simulado para PRs
      - name: Simulate merge into main
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        run: |
          git config --global user.email "ci@github.com"
          git config --global user.name  "CI Bot"
          git fetch origin main
          git checkout -b simulated-main origin/main
          git fetch origin ${{ github.head_ref }}
          git merge --no-commit --no-ff origin/${{ github.head_ref }} || true

      # (2) Build + tests
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: temurin

      - name: Build & test
        run: ${{ inputs.build_command }}

      # (3) Sonar
      - name: Install SonarScanner
        run: |
          curl -sSLo sonar.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.2.4997-linux.zip
          unzip -qq sonar.zip
          sudo mv sonar-scanner-5.0.2.4997-linux /opt/sonar
          echo "/opt/sonar/bin" >> $GITHUB_PATH

      - name: Run SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          /opt/sonar/bin/sonar-scanner \
            -Dsonar.projectKey=${{ inputs.sonar_project_key }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Get analysis-id
        id: extract
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          id=$(curl -s -u "${SONAR_TOKEN}:" \
              "https://sonarcloud.io/api/project_analyses/search?project=${{ inputs.sonar_project_key }}" |
              jq -r '.analyses[0].key')
          echo "analysis-id=$id" >> "$GITHUB_OUTPUT"

      - name: Quality Gate check
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          status=$(curl -s -u "${SONAR_TOKEN}:" \
                  "https://sonarcloud.io/api/qualitygates/project_status?analysisId=${{ steps.extract.outputs.analysis-id }}" |
                  jq -r '.projectStatus.status')
          [[ "$status" == "OK" ]] || { echo "Quality Gate failed"; exit 1; }

  deploy:
    needs: analyze
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push image
        run: |
          docker buildx build --push --tag ${{ inputs.docker_image }} .

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key:      ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            docker pull ${{ inputs.docker_image }}
            docker stop ${{ inputs.service_name }}-prod || true
            docker rm   ${{ inputs.service_name }}-prod || true
            docker run -d --restart=unless-stopped \
              --name ${{ inputs.service_name }}-prod \
              -p ${{ inputs.container_port }}:${{ inputs.container_port }} \
              --network banking-net \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e API_KEY=${{ secrets.API_KEY }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              ${{ inputs.docker_image }}
