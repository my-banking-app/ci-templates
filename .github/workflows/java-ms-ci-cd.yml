name: Reusable Microservice java CI/CD

on:
  workflow_call:
    inputs:
      service-name:
        description: 'Name of the microservice'
        required: true
        type: string
      docker-image-name:
        description: 'Docker image name'
        required: true
        type: string
      service-port:
        description: 'Port where the service runs'
        required: true
        type: string
      sonar-project-key:
        description: 'SonarCloud project key'
        required: true
        type: string
      java-version:
        description: 'Java version to use'
        required: false
        type: string
        default: '21'
      maven-command:
        description: 'Maven command to run'
        required: false
        type: string
        default: 'mvn clean verify'
    secrets:
      SONAR_TOKEN:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      VPS_HOST:
        required: true
      VPS_USERNAME:
        required: true
      VPS_PRIVATE_KEY:
        required: true
      SPRING_DATASOURCE_URL:
        required: true
      DB_NAME:
        required: true
      DB_USER:
        required: true
      DB_PASSWORD:
        required: true
      API_KEY:
        required: true
      JWT_SECRET:
        required: true

jobs:
  analyze:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    outputs:
      analysis-id: ${{ steps.extract-analysis-id.outputs.analysis-id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Simular merge del PR en main
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        run: |
          echo "üß© Simulando merge del PR con main para ${{ inputs.service-name }}..."
          git config --global user.email "ci@github.com"
          git config --global user.name "CI Bot"
          git fetch origin main
          git checkout -b simulated-main origin/main
          git fetch origin ${{ github.head_ref }}
          git merge --no-commit --no-ff origin/${{ github.head_ref }} || true

      - name: Set up JDK ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'

      - name: Build with Maven (para Jacoco)
        run: ${{ inputs.maven-command }}

      - name: Install SonarScanner CLI (silent)
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.2.4997-linux.zip
          unzip -qq sonar-scanner.zip
          sudo mv sonar-scanner-5.0.2.4997-linux /opt/sonar-scanner > /dev/null 2>&1
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Run SonarScanner CLI
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          /opt/sonar-scanner/bin/sonar-scanner \
            -Dsonar.login=${SONAR_TOKEN}

      - name: Obtener √∫ltimo analysisId
        id: extract-analysis-id
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "‚åõ Obteniendo √∫ltimo analysisId desde la API para ${{ inputs.service-name }}..."
          analysisId=$(curl -s -u "${SONAR_TOKEN}:" \
            "https://sonarcloud.io/api/project_analyses/search?project=${{ inputs.sonar-project-key }}" \
            | jq -r '.analyses[0].key')

          if [ -z "$analysisId" ]; then
            echo "‚ùå No se pudo obtener el analysisId"
            exit 1
          fi

          echo "analysis-id=$analysisId" >> $GITHUB_OUTPUT

      - name: Validar Quality Gate (fail early)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          analysisId="${{ steps.extract-analysis-id.outputs.analysis-id }}"
          status=$(curl -s -u "${SONAR_TOKEN}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?analysisId=${analysisId}" \
            | jq -r '.projectStatus.status')

          echo "üîç Estado del Quality Gate para ${{ inputs.service-name }}: $status"
          if [ "$status" != "OK" ]; then
            echo "‚ùå Quality Gate fall√≥ para ${{ inputs.service-name }}. Cancelando pipeline."
            exit 1
          fi

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: analyze
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push production image
        run: |
          echo "üê≥ Building and pushing ${{ inputs.docker-image-name }}:prod..."
          docker buildx build --push --tag ${{ secrets.DOCKER_USERNAME }}/${{ inputs.docker-image-name }}:prod .

      - name: SSH to VPS and deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            echo "üöÄ Deploying ${{ inputs.service-name }} to VPS..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ inputs.docker-image-name }}:prod
            docker stop ${{ inputs.docker-image-name }}-prod || true
            docker rm ${{ inputs.docker-image-name }}-prod || true
            docker run -d --restart=unless-stopped --name ${{ inputs.docker-image-name }}-prod -p ${{ inputs.service-port }}:${{ inputs.service-port }} \
              --network banking-net \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e API_KEY=${{ secrets.API_KEY }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ inputs.docker-image-name }}:prod
            echo "‚úÖ ${{ inputs.service-name }} deployed successfully!"